//Bruteforce Approach

class Solution {
    public int maxProfit(int[] prices) {
        /*
         * Start recursion from day = 1 (we use 1-based indexing for easier mapping to prices[day - 1])
         * Initially, we are not holding any stock (holdStock = false)
         * We are allowed at most 2 transactions (txnCount = 2)
         */
        return calculateMaxProfit(1, prices, false, 2);
    }
    
    private int calculateMaxProfit(int day, int[] prices, boolean holdStock, int txnCount) {
        // Base Case:
        // If all days are processed or no transactions are left, no profit can be made
        if (txnCount == 0 || day > prices.length) {
            return 0;
        }

        // If we do NOT currently hold a stock
        if (!holdStock) {
            /*
             * Two choices:
             * 1. Buy the stock today:
             *    - Deduct price from profit since buying is a cost.
             *    - We DO NOT reduce txnCount here because transaction is not yet complete.
             *
             * 2. Skip buying today:
             *    - Move to next day with same state.
             */
            int buyStock = -prices[day - 1] + calculateMaxProfit(day + 1, prices, true, txnCount);
            int skipBuy = calculateMaxProfit(day + 1, prices, false, txnCount);

            return Math.max(buyStock, skipBuy);
        }

        /*
         * If we currently HOLD a stock:
         * Two choices:
         * 1. Sell the stock today:
         *    - Add price to profit since we are selling.
         *    - Decrease txnCount by 1 because the transaction is now complete (buy + sell).
         *
         * 2. Skip selling today:
         *    - Continue to next day still holding the stock, with same txnCount.
         */
        int sellStock = prices[day - 1] + calculateMaxProfit(day + 1, prices, false, txnCount - 1);
        int skipSell = calculateMaxProfit(day + 1, prices, true, txnCount);

        return Math.max(sellStock, skipSell);
    }
}


//Improved Approach

class Solution {
    /*
    * dp[day][holdStock][txnCount] represents the maximum profit achievable 
    * from day 'day' to the end of the price list, given:
    * 
    * - holdStock:
    *     0 → You do NOT currently hold any stock, so you're allowed to buy.
    *     1 → You ARE currently holding a stock, so you're only allowed to sell.
    *
    * - txnCount:
    *     Number of completed transactions so far (maximum of 2 transactions allowed).
    *     Each transaction is defined as one buy followed by one sell.
    *
    * Decision-making:
    * 
    * If holdStock == 0:
    *   → You can either:
    *     1. Buy the stock: Subtract the current price and move to the next day with holdStock = 1.
    *     2. Skip buying: Move to the next day with holdStock = 0.
    * 
    * If holdStock == 1:
    *   → You can either:
    *     1. Sell the stock: Add the current price, increment txnCount by 1, and move to next day with holdStock = 0.
    *     2. Skip selling: Move to the next day with holdStock = 1.
    */

    private int[][][] cache;

    public int maxProfit(int[] prices) {
        cache = new int[prices.length + 1][2][3];
        initializeCache();
        return calculateMaxProfit(1, prices, 0, 2);
    }

    private int calculateMaxProfit(int day, int[] prices, int holdStock, int txnCount) {
        if (txnCount == 0 || day > prices.length) {
            return 0;
        }

        if (cache[day][holdStock][txnCount] != -1) {
            return cache[day][holdStock][txnCount];
        }

        if (holdStock == 0) {
            int buyStock = -prices[day - 1] + calculateMaxProfit(day + 1, prices, 1, txnCount);
            int skipBuy = calculateMaxProfit(day + 1, prices, 0, txnCount);

            return cache[day][holdStock][txnCount] = Math.max(buyStock, skipBuy);
        }

        int sellStock = prices[day - 1] + calculateMaxProfit(day + 1, prices, 0, txnCount - 1);
        int skipSell = calculateMaxProfit(day + 1, prices, 1, txnCount);

        return cache[day][holdStock][txnCount] = Math.max(sellStock, skipSell);
    }

    private void initializeCache() {
        for (int i = 0; i < cache.length; i++) {
            for (int j = 0; j < cache[0].length; j++) {
                Arrays.fill(cache[i][j], -1);
            }
        }
    }
}


//Better Approach

//Naive Implementation 

class Solution {
    public int maxProfit(int[] prices) {
        /*
         * dp[day][holdStock][txnCount] represents the maximum profit achievable 
         * from day 'day' to the end of the price list, given:
         * 
         * - holdStock:
         *     0 → You do NOT currently hold any stock, so you're allowed to buy.
         *     1 → You ARE currently holding a stock, so you're only allowed to sell.
         *
         * - txnCount:
         *     Number of completed transactions so far (maximum of 2 transactions allowed).
         *     Each transaction is defined as one buy followed by one sell.
         *
         * Decision-making:
         * 
         * If holdStock == 0:
         *   → You can either:
         *     1. Buy the stock: Subtract the current price and move to the next day with holdStock = 1.
         *     2. Skip buying: Move to the next day with holdStock = 0.
         * 
         * If holdStock == 1:
         *   → You can either:
         *     1. Sell the stock: Add the current price, increment txnCount by 1, and move to next day with holdStock = 0.
         *     2. Skip selling: Move to the next day with holdStock = 1.
         * 
         */
        int[][][] dp = new int[prices.length + 1][2][3];

        for (int day = 0; day <= prices.length; day++) {
            for (int holdStock = 0; holdStock <= 1; holdStock++) {
                dp[day][holdStock][0] = 0;
            }
        }

        for (int holdStock = 0; holdStock <= 1; holdStock++) {
            for (int txnCount = 0; txnCount <= 2; txnCount++) {
                dp[prices.length][holdStock][txnCount] = 0; // If no days left, profit is 0
            }
        }

        for (int day = prices.length - 1; day >= 0; day--) {
            for (int holdStock = 0; holdStock <= 1; holdStock++) {
                for (int txnCount = 1; txnCount <= 2; txnCount++) {
                    int profit = 0;
                    if (holdStock == 0) {
                        int buyStock = -prices[day] + dp[day + 1][1][txnCount];
                        int skipBuy = dp[day + 1][0][txnCount];
                        profit = Math.max(buyStock, skipBuy);
                    } else {
                        int sellStock = prices[day] + dp[day + 1][0][txnCount - 1];
                        int skipSell = dp[day + 1][1][txnCount];
                        profit = Math.max(sellStock, skipSell);
                    }

                    dp[day][holdStock][txnCount] = profit;
                }
            }
        }

        /*
         * Start from day 0, with holdStock = 0 (i.e., not holding any stock → allowed to buy),
         * and 2 transactions left. Return the maximum achievable profit.
         */
        return dp[0][0][2];
    }
}


//Optimal implementation 

class Solution {
    public int maxProfit(int[] prices) {
        int[][][] dp = new int[prices.length + 1][2][3];

        for (int day = prices.length - 1; day >= 0; day--) {
            for (int holdStock = 0; holdStock <= 1; holdStock++) {
                for (int txnCount = 1; txnCount <= 2; txnCount++) {
                    int profit = 0;
                    if (holdStock == 0) {
                        int buyStock = -prices[day] + dp[day + 1][1][txnCount];
                        int skipBuy = dp[day + 1][0][txnCount];
                        profit = Math.max(buyStock, skipBuy);
                    } else {
                        int sellStock = prices[day] + dp[day + 1][0][txnCount - 1];
                        int skipSell = dp[day + 1][1][txnCount];
                        profit = Math.max(sellStock, skipSell);
                    }

                    dp[day][holdStock][txnCount] = profit;
                }
            }
        }
        
        return dp[0][0][2];
    }
}


//Optimal approach (space optimised : 3D to 2 2D array)

class Solution {
    public int maxProfit(int[] prices) {
        int[][] currentDay = new int[2][3];
        int[][] nextDay = new int[2][3];

        for (int day = prices.length - 1; day >= 0; day--) {
            for (int holdStock = 0; holdStock <= 1; holdStock++) {
                for (int txnCount = 1; txnCount <= 2; txnCount++) {
                    int profit = 0;
                    if (holdStock == 0) {
                        int buyStock = -prices[day] + nextDay[1][txnCount];
                        int skipBuy = nextDay[0][txnCount];
                        profit = Math.max(buyStock, skipBuy);
                    } else {
                        int sellStock = prices[day] + nextDay[0][txnCount - 1];
                        int skipSell = nextDay[1][txnCount];
                        profit = Math.max(sellStock, skipSell);
                    }

                    currentDay[holdStock][txnCount] = profit;
                }
            }
            int[][] temp = currentDay;
            currentDay = nextDay;
            nextDay = temp;
        }

        return nextDay[0][2];
    }
}
