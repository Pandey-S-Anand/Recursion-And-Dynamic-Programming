//Bruteforce Approach

class Solution {
    public int maxProfit(int[] prices) {
        // Starting with day 1 and not holding any stock initially.
        return calculateMaxProfit(1, prices, false);
    }

    private int calculateMaxProfit(int day, int[] prices, boolean holdStock) {
        // If the current day exceeds the total number of days, no more transactions can be made, so profit is 0.
        if (day > prices.length) {
            return 0;
        }

        // CASE 1: We do NOT currently hold any stock. We have two options — buy the stock or skip.
        if (!holdStock) {

            /**
             * CHOICE 1: Buy the stock today.
             *   - Subtract today's price from profit (since it's a cost).
             *   - Move to the next day with stock in hand.
             */
            int buyStock = -prices[day - 1] + calculateMaxProfit(day + 1, prices, true);

            /**
             * CHOICE 2: Skip buying today.
             *   - Move to the next day without buying.
             */
            int skipBuy = calculateMaxProfit(day + 1, prices, false);

            /**
             * Return the better of the two options: buying or skipping.
             */
            return Math.max(buyStock, skipBuy);
        }

        // CASE 2: We ARE currently holding a stock.  We have two options — sell it or skip.

        /**
         * CHOICE 1: Sell the stock today.
         *   - Add today's price to profit (gain).
         *   - Apply cooldown by skipping the next day (move to day + 2).
         *   - After selling, we no longer hold stock.
         */
        int sellStock = prices[day - 1] + calculateMaxProfit(day + 2, prices, false);

        // CHOICE 2: Skip selling today. - Hold the stock and move to the next day.
        int skipSell = calculateMaxProfit(day + 1, prices, true);

        // Return the better of the two options: selling or holding.
        return Math.max(sellStock, skipSell);
    }
}


//Improved Approach

class Solution {
    /**
    * cache[day][holdStock] represents the maximum profit that can be earned
    * starting from day 'day' and onward, given the current holding state:
    *
    * - cache[day][0] → Max profit starting from day when NOT holding a stock
    * - cache[day][1] → Max profit starting from day when HOLDING a stock
    */
    private int[][] cache;

    public int maxProfit(int[] prices) {
        cache = new int[prices.length + 1][2];
        intializeCache();
        return calculateMaxProfit(1, prices, 0);
    }

    private int calculateMaxProfit(int day, int[] prices, int holdStock) {
        if (day > prices.length) {
            return 0;
        }

        if (cache[day][holdStock] != -1) {
            return cache[day][holdStock];
        }

        if (holdStock == 0) {
            int buyStock = -prices[day - 1] + calculateMaxProfit(day + 1, prices, 1);
            int skipBuy = calculateMaxProfit(day + 1, prices, 0);

            return cache[day][holdStock] = Math.max(buyStock, skipBuy);
        }

        int sellStock = prices[day - 1] + calculateMaxProfit(day + 2, prices, 0);

        int skipSell = calculateMaxProfit(day + 1, prices, 1);

        return cache[day][holdStock] = Math.max(sellStock, skipSell);
    }

    private void intializeCache() {
        for (int i = 0; i < cache.length; i++) {
            Arrays.fill(cache[i], -1);
        }
    }
}


//Better Approach

class Solution {
    public int maxProfit(int[] prices) {
        /**
        * dp[day][holdStock] represents the maximum profit that can be earned
        * starting from day 'day' and onward, given the current holding state:
        *
        * - dp[day][0] → Max profit starting from day when NOT holding a stock
        * - dp[day][1] → Max profit starting from day when HOLDING a stock
        */
        int[][] dp = new int[prices.length + 3][2];

        dp[prices.length + 1][0] = dp[prices.length + 1][1] = dp[prices.length + 2][0] = dp[prices.length + 2][1] = 0;

        for (int day = prices.length; day >= 1; day--) {
            for (int holdStock = 0; holdStock <= 1; holdStock++) {
                int profit = 0;
                if (holdStock == 0) {
                    int buyStock = -prices[day - 1] + dp[day + 1][1];
                    int skipBuy = dp[day + 1][0];

                    profit = Math.max(buyStock, skipBuy);
                } else {
                    int sellStock = prices[day - 1] + dp[day + 2][0];
                    int skipSell = dp[day + 1][1];

                    profit = Math.max(sellStock, skipSell);
                }
                dp[day][holdStock] = profit;
            }
        }

        return dp[1][0];
    }
}


//Optimal approach

class Solution {
    public int maxProfit(int[] prices) {
        int[] currentDay = new int[2];
        int[] nextDay = new int[2];
        int[] dayAfterNext = new int[2];

        nextDay[0] = nextDay[1] = dayAfterNext[0] = dayAfterNext[1] = 0;

        for (int day = prices.length; day >= 1; day--) {
            for (int holdStock = 0; holdStock <= 1; holdStock++) {
                int profit = 0;
                if (holdStock == 0) {
                    int buyStock = -prices[day - 1] + nextDay[1];
                    int skipBuy = nextDay[0];

                    profit = Math.max(buyStock, skipBuy);
                } else {
                    int sellStock = prices[day - 1] + dayAfterNext[0];
                    int skipSell = nextDay[1];

                    profit = Math.max(sellStock, skipSell);
                }
                currentDay[holdStock] = profit;
            }

            int[] temp = dayAfterNext;
            dayAfterNext = nextDay;
            nextDay = currentDay;
            currentDay = temp;
        }

        return nextDay[0];
    }
}
