/*
Logic :

Let the sum of all elements in the array be S. We want to partition the array into two subsets S1 and S2 such that their sums are equal. 
Thus, S = S1 + S2, and since S1 = S2, we get:

S = 2 Ã— S1
or
S1 = S / 2

Condition for Feasibility:
- If S is odd, it's impossible to split the array into two equal subsets.
- If S is even, check if there exists a subset with sum S / 2. This reduces to a subset sum problem.
*/

//Bruteforce Approach

class Solution {
    public boolean canPartition(int[] arr) {
        // Calculate the total sum of the array
        int arrSum = Arrays.stream(arr).sum();

        // If total sum is odd, it's impossible to split into two equal subsets
        if (arrSum % 2 != 0) {
            return false;
        }

        // Otherwise, check if there's a subset with sum = totalSum / 2
        return hasSubsetWithTargetSum(arr, 0, arrSum / 2);
    }

    private boolean hasSubsetWithTargetSum(int[] arr, int index, int targetSum) {
        if (index == arr.length) {
            return targetSum == 0;
        }

        if (targetSum >= arr[index] && hasSubsetWithTargetSum(arr, index + 1, targetSum - arr[index])) {
            return true;
        }

        return hasSubsetWithTargetSum(arr, index + 1, targetSum);
    }
}


//Better Approach

class Solution {
    private int[][] cache;

    public boolean canPartition(int[] arr) {
        int arrSum = Arrays.stream(arr).sum();

        if (arrSum % 2 != 0) {
            return false;
        }

        int targetSum = arrSum / 2;
        // cache[i][j] represents whether it is possible to achieve a sum of j using the subarray arr[i ... arr.length - 1].
        cache = new int[arr.length][targetSum + 1];
        intializeCache();
        return hasSubsetWithTargetSum(arr, 0, targetSum);
    }

    private boolean hasSubsetWithTargetSum(int[] arr, int index, int targetSum) {
        if (index == arr.length) {
            return targetSum == 0;
        }

        if (cache[index][targetSum] != -1) {
            return cache[index][targetSum] == 1;
        }

        if (targetSum >= arr[index] && hasSubsetWithTargetSum(arr, index + 1, targetSum - arr[index])) {
            cache[index][targetSum] = 1;
            return true;
        }

        cache[index][targetSum] = hasSubsetWithTargetSum(arr, index + 1, targetSum) ? 1 : 0;
        return cache[index][targetSum] == 1;
    }

    private void intializeCache() {
        for (int i = 0; i < cache.length; i++) {
            Arrays.fill(cache[i], -1);
        }
    }
}


//Optimal approach

class Solution {
    public boolean canPartition(int[] arr) {
        int arrSum = Arrays.stream(arr).sum();
        if (arrSum % 2 != 0) {
            return false;
        }
        return hasSubsetWithTargetSum(arr, arrSum / 2);
    }

    private boolean hasSubsetWithTargetSum(int arr[], int targetSum) {
        boolean[] nextRow = new boolean[targetSum + 1];
        boolean[] currentRow = new boolean[targetSum + 1];

        nextRow[0] = true;

        for (int index = arr.length - 1; index >= 0; index--) {
            /*
             * When attempting to partition an array into two subsets with equal sums, each
             * element must be assigned to one of the two subsets. If any element in the
             * array is greater than the defined target sum, it cannot be included in either
             * subset. This is because including such an element would automatically cause
             * that subset's sum to exceed the target sum, violating the requirement for equal sums.
             * For example,arr[]={15,5} if targetSum = 10 and you have an element x = 15,
             * adding x to either of the subset will result in a sum greater than 10, thus
             * making it impossible to partition the array into two equal sum subset
             */
            if (arr[index] > targetSum) {
                return false;
            }
            for (int sum = 0; sum <= targetSum; sum++) {
                if (sum >= arr[index] && nextRow[sum - arr[index]]) {
                    currentRow[sum] = true;
                } else {
                    currentRow[sum] = nextRow[sum];
                }
            }

            if (currentRow[targetSum]) {
                return true;
            }

            boolean[] temp = currentRow;
            currentRow = nextRow;
            nextRow = temp;
        }

        return nextRow[targetSum];
    }
}
