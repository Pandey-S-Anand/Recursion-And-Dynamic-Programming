/*
You cannot hold multiple stocks at the same time. At the start, you are allowed to buy a stock because you currently do not own any.

On any given day when you have the option to buy, you have two choices:

Buy the stock: If you choose to buy on that day, you will not be able to buy again until you sell the stock you just acquired.
In this case, you should account for the purchase as a negative value (since profit is calculated as sell price minus buy price).
Not buy the stock: If you decide not to buy, you still retain the option to purchase the stock on a future day.

On any given day when you donot have the option to buy the stock(it means you already hold a stock.), In this situation, you also have two options:

Sell the stock: If you choose to sell on that day, you can then buy a stock again in the future.
You would add the selling price as a positive value (since profit is calculated as sell price minus buy price).
Not sell the stock: If you choose not to sell, you cannot buy any other stock until you sell the one you currently hold.


When we reach the end of the index, In this case, the maximum profit will be 0, as there are no more days left to make any trades.
*/

//Bruteforce Approach

class Solution {
    public int maxProfit(int[] prices) {
        // Start from day 1 (1-based for convenience in this implementation) Initially, we do not hold any stock, so holdStock = false
        return calculateMaxProfit(1, prices, false);
    }

    private int calculateMaxProfit(int day, int[] prices, boolean holdStock) {
        // Base case: If day exceeds total number of days, no further transactions can be made
        if (day > prices.length) {
            return 0;
        }

        // Case 1: We do NOT currently hold a stock → We can either buy or skip buying
        if (!holdStock) {
            // Option 1: Buy stock today → Deduct price of current day from profit and switch to holdStock=true
            int buyStock = -prices[day - 1] + calculateMaxProfit(day + 1, prices, true);

            // Option 2: Skip buying today → Move to next day without holding any stock
            int skipBuy = calculateMaxProfit(day + 1, prices, false);

            // Take the maximum of buying or skipping
            return Math.max(buyStock, skipBuy);
        }

        // Case 2: We currently HOLD a stock → We can either sell or skip selling
        // Option 1: Sell stock today → Add today's price to profit and switch to holdStock=false
        int sellStock = prices[day - 1] + calculateMaxProfit(day + 1, prices, false);

        // Option 2: Skip selling today → Continue to next day still holding the stock
        int skipSell = calculateMaxProfit(day + 1, prices, true);

        // Take the maximum of selling or skipping
        return Math.max(sellStock, skipSell);
    }
}


//Improved Approach

class Solution {
    private int[][] cache;

    public int maxProfit(int[] prices) {
        //cache[day][holdStock] stores the maximum profit that can be earned starting from day 'day' with the current stock-holding state represented by holdStock.
        cache = new int[prices.length + 1][2];
        intializeCache();
        return calculateMaxProfit(1, prices, 0);
    }

    private int calculateMaxProfit(int day, int[] prices, int holdStock) {
        if (day > prices.length) {
            return 0;
        }

        if (cache[day][holdStock] != -1) {
            return cache[day][holdStock];
        }

        if (holdStock == 0) {
            int buyStock = -prices[day - 1] + calculateMaxProfit(day + 1, prices, 1);

            int skipBuy = calculateMaxProfit(day + 1, prices, 0);

            return cache[day][holdStock] = Math.max(buyStock, skipBuy);
        }

        int sellStock = prices[day - 1] + calculateMaxProfit(day + 1, prices, 0);

        int skipSell = calculateMaxProfit(day + 1, prices, 1);

        return cache[day][holdStock] = Math.max(sellStock, skipSell);
    }

    private void intializeCache() {
        for (int i = 0; i < cache.length; i++) {
            Arrays.fill(cache[i], -1);
        }
    }
}


//Better Approach

class Solution {
    public int maxProfit(int[] prices) {
        /*
        * dp[day][holdStock] represents the maximum profit achievable starting from
        * day 'day' to the last trading day (prices.length - 1), given the current stock holding status:
        *
        * - If holdStock == 0: This means we do NOT currently hold a stock, so we have the option to BUY today.
        *   Choices:
        *     1. Buy the stock: Subtract today's price (as a cost), move to next day in state holdStock = 1.
        *     2. Skip buying: Remain in holdStock = 0, move to next day.
        *
        * - If holdStock == 1: This means we ALREADY hold a stock, so we can choose to SELL or HOLD.
        *   Choices:
        *     1. Sell the stock: Add today's price (as revenue), move to next day in state holdStock = 0.
        *     2. Skip selling: Remain in holdStock = 1, move to next day.
        */
        int[][] dp = new int[prices.length + 1][2];

        dp[prices.length][0] = dp[prices.length][1] = 0;

        for (int day = prices.length - 1; day >= 0; day--) {
            for (int holdStock = 0; holdStock <= 1; holdStock++) {
                int profit = 0;
                if (holdStock == 0) {
                    int buyStock = -prices[day] + dp[day + 1][1];
                    int skipBuy = dp[day + 1][0];
                    profit = Math.max(buyStock, skipBuy);
                } else {
                    int sellStock = prices[day] + dp[day + 1][0];
                    int skipSell = dp[day + 1][1];
                    profit = Math.max(sellStock, skipSell);
                }
                dp[day][holdStock] = profit;
            }
        }
        /*
         * Start from day 0 with holdStock = 0, i.e., we are allowed to buy.
         * This returns the max profit we can achieve by making optimal decisions across all days.
         */
        return dp[0][0];
    }
}


//Optimal approach

class Solution {
    public int maxProfit(int[] prices) {
        int[] currentDay = new int[2];
        int[] nextDay = new int[2];

        for (int day = prices.length - 1; day >= 0; day--) {
            currentDay[1] = Math.max(-prices[day] + nextDay[0], nextDay[1]);
            currentDay[0] = Math.max(prices[day] + nextDay[1], nextDay[0]);

            int[] temp = currentDay;
            currentDay = nextDay;
            nextDay = temp;
        }

        return nextDay[1];
    }
}
