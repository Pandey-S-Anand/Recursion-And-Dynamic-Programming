//Bruteforce Approach

class Solution {
    Boolean isSubsetSum(int arr[], int targetSum) {
        return hasSubsetWithTargetSum(arr, 0, targetSum);
    }

    private boolean hasSubsetWithTargetSum(int[] arr, int index, int targetSum) {
        /*
         * Base case: If we've exhauated the array (index == arr.length),
         * check if the target sum is zero. If it is, we have found a valid subset
         * that adds up to the target sum, so return true. Otherwise, 
         * return false to indicate no valid subset was found for this path.
         */
        if (index == arr.length) {
            return targetSum == 0;
        }
        
         /*
         * If the current element is greater than the target sum, we cannot include it in the subset.
         * Including this element would reduce the target sum to a negative value, which is not achievable.
         * According to the problem constraints, both the array elements and the target
         * sum are positive.Therefore, once the target sum becomes negative, it cannot return to a
         * non-negative value, so this path can safely be ignored.
         * This check prevents unnecessary recursive calls, improving the efficiency of the algorithm.
         */
        // Option 1: Include the current element (only if it's not greater than the targetSum)
        if (targetSum >= arr[index] && hasSubsetWithTargetSum(arr, index + 1, targetSum - arr[index])) {
           return true;
        }

        // Option 2: Exclude the current element
        return hasSubsetWithTargetSum(arr, index + 1, targetSum);
    }
}


//Improved Approach

class Solution {
    private int[][] cache;

    Boolean isSubsetSum(int arr[], int targetSum) {
        // cache[i][j] represents whether it is possible to achieve a sum of j using the subarray arr[i ... arr.length - 1].
        cache = new int[arr.length][targetSum + 1];
        intializeCache();
        return hasSubsetWithTargetSum(arr, 0, targetSum);
    }

    private boolean hasSubsetWithTargetSum(int[] arr, int index, int targetSum) {
        if (index == arr.length) {
            return targetSum == 0;
        }

        if (cache[index][targetSum] != -1) {
            return cache[index][targetSum] == 1;
        }

        if (targetSum >= arr[index] && hasSubsetWithTargetSum(arr, index + 1, targetSum - arr[index])) {
            cache[index][targetSum] = 1;
            return true;
        }

        cache[index][targetSum] = hasSubsetWithTargetSum(arr, index + 1, targetSum) ? 1 : 0;
        return cache[index][targetSum] == 1;
    }

    private void intializeCache() {
        for (int i = 0; i < cache.length; i++) {
            Arrays.fill(cache[i], -1);
        }
    }
}


//Better Approach

//Naive Implementation

class Solution {
    Boolean isSubsetSum(int arr[], int targetSum) {
        // dp[i][j] represents whether it is possible to achieve a target sum of j using the subarray [i..arr.length-1]
        boolean[][] dp = new boolean[arr.length+1][targetSum + 1];

        dp[arr.length][0] = true;

        for (int sum = targetSum; sum > 0; sum--) {
            dp[arr.length][sum] = false;
        }

        for (int index = arr.length - 1; index >= 0; index--) {
            for (int sum = 0; sum <= targetSum; sum++) {
                if (sum >= arr[index] && dp[index + 1][sum - arr[index]]) {
                    dp[index][sum] = true;
                } else {
                    dp[index][sum] = dp[index + 1][sum];
                }
            }
        }

        return dp[0][targetSum];
    }
}


//Optimal Implementation 

class Solution {
    Boolean isSubsetSum(int arr[], int targetSum) {
        boolean[][] dp = new boolean[arr.length+1][targetSum + 1];

        dp[arr.length][0] = true;

        for (int index = arr.length - 1; index >= 0; index--) {
            for (int sum = 0; sum <= targetSum; sum++) {
                if (sum >= arr[index] && dp[index + 1][sum - arr[index]]) {
                    dp[index][sum] = true;
                } else {
                    dp[index][sum] = dp[index + 1][sum];
                }
            }

             // Early exit: If targetSum is achievable at this point, return true immediately.
            if(dp[index][targetSum]){
                return true;
            }
        }

        return dp[0][targetSum];
    }
}


//Optimal approach

class Solution {
    Boolean isSubsetSum(int arr[], int targetSum) {
        boolean[] nextRow = new boolean[targetSum + 1];
        boolean[] currentRow = new boolean[targetSum + 1];

        nextRow[0] = true;

        for (int index = arr.length - 1; index >= 0; index--) {
            for (int sum = 0; sum <= targetSum; sum++) {
                if (sum >= arr[index] && nextRow[sum - arr[index]]) {
                    currentRow[sum] = true;
                } else {
                    currentRow[sum] = nextRow[sum];
                }
            }

            // Early exit: If targetSum is achievable at this point, return true immediately.
            if (currentRow[targetSum]) {
                return true;
            }

            boolean[] temp = currentRow;
            currentRow = nextRow;
            nextRow = temp;
        }

        return nextRow[targetSum];
    }
}
