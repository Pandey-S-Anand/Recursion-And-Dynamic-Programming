//Method 1

//Naive Approach

class Solution {
    public int findTargetSumWays(int[] arr, int targetSum) {
        // Start recursive exploration from index 0 with the target sum
        return findTargetSumWays(arr, 0, targetSum);
    }

    private int findTargetSumWays(int[] arr, int index, int targetSum) {
        // Base case: if all elements are processed
        if (index == arr.length) {
            // If the final remaining sum is zero, it's a valid way
            return targetSum == 0 ? 1 : 0;
        }

        /**
        * At each index, we have two choices:
        *   1. Assign '+' sign to arr[index] → this reduces the remaining target sum
        *        targetSum becomes: targetSum - arr[index]
        *
        *   2. Assign '-' sign to arr[index] → this increases the remaining target sum
        *        targetSum becomes: targetSum - (-arr[index]) = targetSum + arr[index]
        *
        * This recursion explores all such combinations and counts how many lead to
        * a final targetSum == 0 when the end of the array is reached.
        */
        // Choice 1: Add '+' sign → subtract current value from targetSum
        int waysWithPositiveSign = findTargetSumWays(arr, index + 1, targetSum - arr[index]);

        // Choice 2: Add '-' sign → subtract (-arr[index]) i.e., add arr[index] to targetSum
        int waysWithNegativeSign = findTargetSumWays(arr, index + 1, targetSum + arr[index]);

        // Total ways from current index = sum of both choices
        return waysWithPositiveSign + waysWithNegativeSign;
    }
}



//Optimal Approach

class Solution {
    // cache[i][j] represents the number of ways to reach the sum (j - offset)  using elements from index i to end of the array.
    private int[][] cache;

    public int findTargetSumWays(int[] arr, int targetSum) {
        int arrSum = 0;

        // Step 1: Calculate total sum of array elements
        for (int num : arr) {
            arrSum += num;
        }

        /*
        We are given an array of non-negative integers and asked to assign either a '+' or '-' 
        sign to each number such that the final evaluated sum equals the given targetSum.
        
        Let totalSum = sum(arr) → This is the **maximum sum** we can achieve if all elements are given a '+' sign.
        The **minimum sum** is then -totalSum → if all elements are assigned a '-' sign.
        
        Therefore, the range of valid targetSum values lies within:
            targetSum ∈ [-totalSum, totalSum]
        
        ------------------------------------------------------------
        ❓ Why do we check: Math.abs(targetSum) > totalSum
        
        If the absolute value of targetSum exceeds totalSum, then:
        1. Case: targetSum < -totalSum  
           → Even if we assign '+' to every remaining element, we can’t bring the sum back to 0.
           → It is **impossible** to achieve such a target.
        
        2. Case: targetSum > totalSum  
           → Even if we assign '-' to every remaining element, we still can’t reduce the sum to 0.
           → So again, it's **impossible** to reach this target.
        
        Hence, when |targetSum| > totalSum, we return 0 directly — as no valid assignment of signs can achieve such a target.
        
        ------------------------------------------------------------
        🧠 Why do we apply an offset to targetSum in memoization?
        
        Since targetSum can take **negative values**, we can't directly use it as an index in the memoization table (`cache[][]`), 
        because array indices must be non-negative.
        
        To solve this, we shift the entire targetSum range by an offset:
            offset = totalSum
        
        Now the targetSum range:
            [-totalSum, totalSum] → becomes → [0, 2 * totalSum]
        
        So any targetSum `t` is stored in cache using:
            cache[index][t + offset]
        
        This technique ensures we avoid negative indices while preserving the full range of valid sums.
        */
        cache = new int[arr.length][(2 * arrSum) + 1]; // size = (n x (2*sum + 1))
        initializeCache();

        return findTargetSumWays(arr, 0, targetSum, arrSum);
    }

    private int findTargetSumWays(int[] arr, int index, int targetSum, int offset) {
        /* 
         Pruning: If current targetSum is outside the valid range [-offset, +offset],
         there's no way to achieve it (i.e reduce it to zero) by adding or subtracting future elements
         */
        if (Math.abs(targetSum) > offset) {
            return 0;
        }

        if (index == arr.length) {
            return targetSum == 0 ? 1 : 0;
        }

        if (cache[index][targetSum + offset] != -1) {
            return cache[index][targetSum + offset];
        }

        int waysWithPositiveSign = findTargetSumWays(arr, index + 1, targetSum - arr[index], offset);
        int waysWithNegativeSign = findTargetSumWays(arr, index + 1, targetSum + arr[index], offset);

        return cache[index][targetSum + offset] = waysWithPositiveSign + waysWithNegativeSign;
    }
}



//Method 2

/*
This problem can be **reduced to the classic "partition into subsets with a given difference" problem**.

We are allowed to assign '+' or '-' signs to each number in the array to build expressions.
At the end of the array (i.e., index == arr.length), if the running sum equals the target, it represents a valid expression.

Example:
    Expression: -1 + 2 - 3 + 4 - 7 + 4 = -1
    This can be viewed as partitioning the array into two subsets:
        S1 (with positive signs): (2 + 4 + 4) = 10
        S2 (with negative signs): (1 + 3 + 7) = 11

    So: S1 - S2 = 10 - 11 = -1 → which equals the target

Hence, the problem is equivalent to finding the number of ways to **partition the array into two subsets S1 and S2** such that:
    S1 - S2 = target

This directly maps to the subset partition problem with a given difference.
*/

//Bruteforce Approach

class Solution {
    public int findTargetSumWays(int[] arr, int targetSum) {
        return countPartitions(arr, targetSum);
    }

    private int countPartitions(int[] arr, int d) {
        int arrSum = Arrays.stream(arr).sum();

        if ((arrSum - d) < 0 || (arrSum - d) % 2 != 0) {
            return 0;
        }

        return countSubsetsWithTargetSum(arr, 0, (arrSum - d) / 2);
    }

    private int countSubsetsWithTargetSum(int[] arr, int index, int targetSum) {
        if (index == arr.length) {
            return targetSum == 0 ? 1 : 0;
        }

        int include = 0;
        if (targetSum >= arr[index]) {
            include = countSubsetsWithTargetSum(arr, index + 1, targetSum - arr[index]);
        }

        int exclude = countSubsetsWithTargetSum(arr, index + 1, targetSum);

        return (include + exclude);
    }
}


//Better approach

class Solution {
    private int[][] cache;

    public int findTargetSumWays(int[] arr, int targetSum) {
        return countPartitions(arr, targetSum);
    }

    private int countPartitions(int[] arr, int d) {
        int arrSum = Arrays.stream(arr).sum();

        if ((arrSum - d) < 0 || (arrSum - d) % 2 != 0) {
            return 0;
        }

        int targetSum = (arrSum - d) / 2;
        cache = new int[arr.length][targetSum + 1];
        intializeCache();

        return countSubsetsWithTargetSum(arr, 0, targetSum);
    }

    private int countSubsetsWithTargetSum(int[] arr, int index, int targetSum) {
        if (index == arr.length) {
            return targetSum == 0 ? 1 : 0;
        }

        if (cache[index][targetSum] != -1) {
            return cache[index][targetSum];
        }

        int include = 0;
        if (targetSum >= arr[index]) {
            include = countSubsetsWithTargetSum(arr, index + 1, targetSum - arr[index]);
        }

        int exclude = countSubsetsWithTargetSum(arr, index + 1, targetSum);

        return cache[index][targetSum] = (include + exclude);
    }

    private void intializeCache() {
        for (int i = 0; i < cache.length; i++) {
            Arrays.fill(cache[i], -1);
        }
    }
}


//Optimal approach

class Solution {
    public int findTargetSumWays(int[] arr, int targetSum) {
        return countPartitions(arr, targetSum);
    }

    private int countPartitions(int[] arr, int d) {
        int arrSum = Arrays.stream(arr).sum();

        if ((arrSum - d) < 0 || (arrSum - d) % 2 != 0) {
            return 0;
        }

        int targetSum = (arrSum - d) / 2;
        return countSubsetsWithTargetSum(arr, targetSum);
    }

    private int countSubsetsWithTargetSum(int arr[], int targetSum) {
        int[] nextRow = new int[targetSum + 1];
        int[] currentRow = new int[targetSum + 1];

        nextRow[0] = 1;

        for (int index = arr.length - 1; index >= 0; index--) {
            for (int sum = 0; sum <= targetSum; sum++) {
                int include = 0;
                if (sum >= arr[index]) {
                    include = nextRow[sum - arr[index]];
                }
                int exclude = nextRow[sum];
                currentRow[sum] = (include + exclude);
            }

            int[] temp = currentRow;
            currentRow = nextRow;
            nextRow = temp;
        }

        return nextRow[targetSum];
    }
}
