//Bruteforce Approach

class Solution {
    private int maxLISLength;

    public int lengthOfLIS(int[] arr) {
        maxLISLength = 0;
        generateAllSubsequences(arr, 0, new ArrayList<>());
        return maxLISLength;
    }

    private void generateAllSubsequences(int[] arr, int index, List<Integer> subsequence) {
        if (index == arr.length) {
            if (isIncreasingSubsequence(subsequence) && subsequence.size() > maxLISLength) {
                maxLISLength = subsequence.size();
            }
            return;
        }

        subsequence.add(arr[index]);
        generateAllSubsequences(arr, index + 1, subsequence);
        subsequence.remove(subsequence.size() - 1);
        generateAllSubsequences(arr, index + 1, subsequence);
    }

    private boolean isIncreasingSubsequence(List<Integer> subsequence) {
        for (int i = 1; i < subsequence.size(); i++) {
            if (subsequence.get(i) <= subsequence.get(i - 1)) {
                return false;
            }
        }

        return true;
    }
}


//Improved Approach

class Solution {
    public int lengthOfLIS(int[] arr) {
        return lengthOfLIS(arr, 0, -1);
    }

    private int lengthOfLIS(int[] arr, int index, int lastIncludedIdx) {
        if (index == arr.length) {
            return 0;
        }

        // Option 1: Include the current element in the subsequence (if it creates an increasing order)
        int include = 0;
        /*
         * Check if the current element is either the first element of the subsequence
         * (lastIncludedIdx == -1) or greater than the last included element in the current subsequence.
         * 
         * lastIncludedIdx = -1 is used as a base case to indicate no prior element in the subsequence, 
         * allowing any element to start a new subsequence.
         * 
         * For other values, lastIncludedIdx can only take values from -1 up to one less than the current index
         */
        if (lastIncludedIdx == -1 || arr[lastIncludedIdx] < arr[index]) {
            include = 1 + lengthOfLIS(arr, index + 1, index);
        }

        // Option 2: Exclude the current element and move to the next index
        int exclude = lengthOfLIS(arr, index + 1, lastIncludedIdx);

        // Return the maximum length of LIS obtained by either including or excluding the current element
        return Math.max(include, exclude);
    }
}


//Further Improved Approach

class Solution {
    /*
     cache[index][lastIncludedIdx + 1]
     represents the length of the longest increasing subsequence starting from index index,
     given that the previous element included in the subsequence is at index lastIncludedIdx.
    */
    private int[][] cache;

    public int lengthOfLIS(int[] arr) {
        cache = new int[arr.length][arr.length + 1];
        intializeCache();
        return lengthOfLIS(arr, 0, -1);
    }

    private int lengthOfLIS(int[] arr, int index, int lastIncludedIdx) {
        if (index == arr.length) {
            return 0;
        }

        if (cache[index][lastIncludedIdx + 1] != -1) {
            return cache[index][lastIncludedIdx + 1];
        }

        int include = 0;
        if (lastIncludedIdx == -1 || arr[lastIncludedIdx] < arr[index]) {
            include = 1 + lengthOfLIS(arr, index + 1, index);
        }

        int exclude = lengthOfLIS(arr, index + 1, lastIncludedIdx);

        return cache[index][lastIncludedIdx + 1] = Math.max(include, exclude);
    }

    private void intializeCache() {
        for (int i = 0; i < cache.length; i++) {
            Arrays.fill(cache[i], -1);
        }
    }
}


//Good Approach

class Solution {
    public int lengthOfLIS(int[] arr) {
        /*
         * dp[i][j] represents the length of the longest increasing subsequence starting
         * from index i to arr.length-1, with j-1 as the last included index that can be used in the subsequence.
         */
        int[][] dp = new int[arr.length + 1][arr.length + 1];

        dp[arr.length][0] = 0;

        for (int index = arr.length - 1; index >= 0; index--) {
            for (int lastIncludedIdx = -1; lastIncludedIdx <= index - 1; lastIncludedIdx++) {
                int include = 0;
                if (lastIncludedIdx == -1 || arr[lastIncludedIdx] < arr[index]) {
                    /*
                     * In recursion, we directly work with array indices (from 0 to n-1), and the case where lastIncludedIndex is -1 is naturally handled by the recursion.
                     * However, in the tabulation approach, we need to store each original 'lastIncludedIndex' as 'lastIncludedIndex + 1' in the DP table.
                     * This +1 shift allows us to handle the case where 'lastIncludedIndex' is -1 (which represents no element being included yet).
                     * By storing -1 at index 0, we can properly reference 'lastIncludedIndex' in the DP table using 'index + 1'.
                     * Therefore, whenever we need to reference 'lastIncludedIndex' in the DP table,  we use 'index + 1' (i.e., original array index + 1).
                     */
                    include = 1 + dp[index + 1][index + 1];
                }

                int exclude = dp[index + 1][lastIncludedIdx + 1];

                dp[index][lastIncludedIdx + 1] = Math.max(include, exclude);
            }
        }
        /*
         * dp[0][0], which represents the maximum length of the increasing subsequence
         * starting from index 0 till the last index with no elements included before it
         * (simulating the lastIncludedIdx = -1 condition in the top-down approach).
         */
        return dp[0][0];
    }
}


//Better approach

class Solution {
    public int lengthOfLIS(int[] arr) {
        int[] currentRow = new int[arr.length + 1];
        int[] nextRow = new int[arr.length + 1];

        for (int index = arr.length - 1; index >= 0; index--) {
            for (int lastIncludedIdx = index-1; lastIncludedIdx >= -1; lastIncludedIdx--) {
                int include = 0;
                if (lastIncludedIdx == -1 || arr[lastIncludedIdx] < arr[index]) {
                    include = 1 + nextRow[index + 1];
                }

                int exclude = nextRow[lastIncludedIdx + 1];

                currentRow[lastIncludedIdx + 1] = Math.max(include, exclude);
            }
            int[] temp = currentRow;
            currentRow = nextRow;
            nextRow = temp;
        }

        return nextRow[0];
    }
}


//Optimal approach

class Solution {
    public int lengthOfLIS(int[] arr) {
        int[] currentRow = new int[arr.length + 1];
        int[] nextRow = new int[arr.length + 1];

        nextRow[0] = 0;

        for (int index = arr.length - 1; index >= 0; index--) {
            for (int lastIncludedIdx = -1; lastIncludedIdx <= index - 1; lastIncludedIdx++) {
                int include = 0;
                if (lastIncludedIdx == -1 || arr[lastIncludedIdx] < arr[index]) {
                    include = 1 + nextRow[index + 1];
                }

                int exclude = nextRow[lastIncludedIdx + 1];

                currentRow[lastIncludedIdx + 1] = Math.max(include, exclude);
            }
            int[] temp = currentRow;
            currentRow = nextRow;
            nextRow = temp;
        }

        return nextRow[0];
    }
}

//Alternate DP approach

/*
   Following is the approach to find the Longest Increasing Subsequence (LIS) in the array by calculating the LIS ending at each index:

   Approach :
   
   Subsequence Ending at Each Index:
    Every increasing subsequence in the array must end at some index `i`. 
    So, we focus on calculating the length of the longest increasing subsequence (LIS) that ends at each index `i`.
    Once we know the LIS length for each ending index, the longest subsequence in the array 
    will be the maximum length among these values.

   Finding Potential LIS Candidates:
    For each element `arr[i]`, we look at all previous elements `arr[j]` (where `j < i`).
    If `arr[i]` is greater than `arr[j]`, then `arr[i]` can extend the increasing subsequence that ends at `arr[j]`.

   Updating the LIS Length for Each `i`:
   - For each valid candidate `arr[j]`, we retrieve the LIS ending at `j` (stored in `dp[j]`).
   - Among all such candidates, the longest subsequence ending at `j` provides the longest possible subsequence that `i` can extend.
   - Finally, we add 1 to this length to include the current element `arr[i]`, which gives us the LIS length ending at `i`.

   Final Step:
   After calculating the LIS ending at each index, the overall longest increasing subsequence in the array is simply the maximum value in the `dp` array.
*/

class Solution {
    public int lengthOfLIS(int[] arr) {
        // dp[i] = length of longest increasing subsequence ending at index i
        int[] dp = new int[arr.length];
        int overallMaxLengthLIS = 0;

        for (int i = 0; i < arr.length; i++) {
            int maxLISLengthEndingBeforeI = 0;
            for (int j = 0; j < i; j++) {
                if (arr[i] > arr[j]) {
                    maxLISLengthEndingBeforeI = Math.max(maxLISLengthEndingBeforeI, dp[j]);
                }
            }
            dp[i] = maxLISLengthEndingBeforeI + 1;
        }

        for (int i = 0; i < arr.length; i++) {
            overallMaxLengthLIS = Math.max(overallMaxLengthLIS, dp[i]);
        }

        return overallMaxLengthLIS;
    }
}


//Further optimised Approach

/*
 *   arr = [2, 5, 3, 7, 11, 8, 10, 13, 6]
 *
 *   Step-by-step tail evolution:
 *     1) [2]
 *     2) [2, 5]
 *     3) [2, 3]       // replace 5 with 3
 *     4) [2, 3, 7]
 *     5) [2, 3, 7, 11]
 *     6) [2, 3, 7, 8] // replace 11 with 8
 *     7) [2, 3, 7, 8, 10]
 *     8) [2, 3, 7, 8, 10, 13]
 *     9) [2, 3, 6, 8, 10, 13] // replace 7 with 6
 *
 *   Final tail = [2, 3, 6, 8, 10, 13], length = 6
 *
 *   But [2,3,6,8,10,13] is NOT a valid subsequence of `arr`, because
 *   6 (index 8) comes after 8 (index 5) in the original array.
 *
 * Reason for substitution:
 *   We always replace with a smaller value (when possible) even though
 *   the current length of `tail` stays the same, because:
 *     – A smaller tail value “opens up” more room for future numbers
 *       to extend the subsequence.
 *     – The smaller the value at position i, the higher the chance
 *       that a later array element > tail[i], letting us grow length.
 *
 * Mini‑example: arr = [10, 1, 3]
 *   1) Process 10 → tail = [10]
 *   2) Process 1  → replace 10 with 1 → tail = [1] (length still 1)
 *   3) Process 3  → append → tail = [1, 3] (length increases to 2)
 *
 *   Here, substituting 10→1 didn’t change the length, but enabled
 *   appending 3 later to form a longer strictly increasing subsequence.
 */
class Solution {
    public int lengthOfLIS(int[] arr) {
        int[] tail = new int[arr.length];
        int length = 0;

        for (int num : arr) {
            int index = lowerBound(tail, length, num);

            if (index == length) {
                length++;
            }

            tail[index] = num;
        }

        return length;
    }

    private int lowerBound(int[] arr, int n, int x) {
        int low = 0, high = n - 1, lowerBound = n;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] >= x) {
                lowerBound = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return lowerBound;
    }
}
