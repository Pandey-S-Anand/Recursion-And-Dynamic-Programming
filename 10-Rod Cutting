//Bruteforce Approach

class Solution {
    public int cutRod(int price[]) {
        return cutRod(price, 1, price.length);
    }

    private int cutRod(int[] price, int pieceLength, int rodLength) {
        // Base case: If the rod length is zero, no revenue can be generated.
        if (rodLength == 0) {
            return 0;
        }

        /*
         * Base case: If we've exhausted all possible piece lengths but still have some
         * length of rod remaining, return a negative value (Integer.MIN_VALUE) to
         * indicate that no valid cut can be made to use up the remaining rod length.
         */
        if (pieceLength > price.length) {
            return Integer.MIN_VALUE;
        }

        // Option 1: Exclude the current piece length and move to the next piece length
        int exclude = cutRod(price, pieceLength + 1, rodLength);
        int include = Integer.MIN_VALUE;

        if (rodLength >= pieceLength) {
            /*
             * Option 2: Include the current piece length if it fits into the remaining rod
             * length. Recursively attempt to cut the rod again using the same piece length
             * to maximize the total value.
             */
            include = cutRod(price, pieceLength, rodLength - pieceLength);
            if (include != Integer.MIN_VALUE) {
                include += price[pieceLength - 1]; // If it's possible to include the current piece, add its value to the total
            }
        }
        // Return the maximum value between including and excluding the current piece length
        return Math.max(include, exclude);
    }
}


//Improved Approach

class Solution {
    // cache[pieceLength][rodLength] stores the maximum total revenue you can generate by cutting a rod of length rodLength using only pieces of length pieceLength or greater.
    private int[][] cache;
    
    public int cutRod(int price[]) {
        cache = new int[price.length + 1][price.length + 1];
        intializeCache();
        return cutRod(price, 1, price.length);
    }

    private int cutRod(int[] price, int pieceLength, int rodLength) {
        if (rodLength == 0) {
            return 0;
        }

        if (pieceLength > price.length) {
            return Integer.MIN_VALUE;
        }
        
        if (cache[pieceLength][rodLength] != -1) {
            return cache[pieceLength][rodLength];
        }

        int exclude = cutRod(price, pieceLength + 1, rodLength);
        int include = Integer.MIN_VALUE;

        if (rodLength >= pieceLength) {
            include = cutRod(price, pieceLength, rodLength - pieceLength);
            if (include != Integer.MIN_VALUE) {
                include += price[pieceLength - 1];
            }
        }

        return cache[pieceLength][rodLength] = Math.max(include, exclude);
    }
    
    private void intializeCache() {
        for (int i = 0; i < cache.length; i++) {
            Arrays.fill(cache[i], -1);
        }
    }
}


//Better Approach

//Naive Implementation 

class Solution {
    public int cutRod(int price[]) {
         // dp[pieceLength][rodLength] stores the maximum total revenue you can generate by cutting a rod of length rodLength using only pieces of length pieceLength or greater.
        int[][] dp = new int[price.length + 2][price.length + 1];
        
        for (int pieceLength = 0; pieceLength <= price.length; pieceLength++) {
            dp[pieceLength][0] = 0;
        }
        
        for (int rodLength = 1; rodLength <= price.length; rodLength++) {
            dp[price.length][rodLength] = Integer.MIN_VALUE;
        }
        
        for (int peiceLength = price.length; peiceLength >= 1; peiceLength--) {
            for (int rodLength = 1; rodLength <= price.length; rodLength++) {
                int exclude = dp[peiceLength + 1][rodLength];
                int include = Integer.MIN_VALUE;

                if (rodLength >= peiceLength) {
                    include = dp[peiceLength][rodLength - peiceLength];
                    if (include != Integer.MIN_VALUE) {
                        include += price[peiceLength - 1];
                    }
                }

                dp[peiceLength][rodLength] = Math.max(include, exclude);
            }
        }
        
        return dp[1][price.length];
    }
}


//Optimal Implementation

class Solution {
    public int cutRod(int price[]) {
        int[][] dp = new int[price.length + 2][price.length + 1];

        for (int rodLength = 1; rodLength <= price.length; rodLength++) {
            dp[price.length][rodLength] = Integer.MIN_VALUE;
        }
        
        for (int peiceLength = price.length; peiceLength >= 1; peiceLength--) {
            for (int rodLength = 1; rodLength <= price.length; rodLength++) {
                int exclude = dp[peiceLength + 1][rodLength];
                int include = Integer.MIN_VALUE;

                if (rodLength >= peiceLength) {
                    include = dp[peiceLength][rodLength - peiceLength];
                    if (include != Integer.MIN_VALUE) {
                        include += price[peiceLength - 1];
                    }
                }

                dp[peiceLength][rodLength] = Math.max(include, exclude);
            }
        }
        
        return dp[1][price.length];
    }
}


//Optimal approach

class Solution {
    public int cutRod(int price[]) {
        int[] currentRow = new int[price.length + 1];
        int[] nextRow = new int[price.length + 1];

        for (int rodLength = 1; rodLength <= price.length; rodLength++) {
            nextRow[rodLength] = Integer.MIN_VALUE;
        }

        for (int peiceLength = price.length; peiceLength >= 1; peiceLength--) {
            for (int rodLength = 1; rodLength <= price.length; rodLength++) {
                int exclude = nextRow[rodLength];
                int include = Integer.MIN_VALUE;

                if (rodLength >= peiceLength) {
                    include = currentRow[rodLength - peiceLength];
                    if (include != Integer.MIN_VALUE) {
                        include += price[peiceLength - 1];
                    }
                }

                currentRow[rodLength] = Math.max(include, exclude);
            }

            int[] temp = currentRow;
            currentRow = nextRow;
            nextRow = temp;
        }

        return nextRow[price.length];
    }
}
