//Bruteforce Approach

/*
Important Testcases:
Ex: 1

arr = {0 ,0, 0, 0}
targetSum=0

Output  : 16

Ex: 2

arr= {0, 0, 1, 0, 1}
targetSum=0

Output  : 8
*/

class Solution {
    private static final int MOD = 1000000007;

    public int perfectSum(int arr[], int targetSum) {
        return countSubsetsWithTargetSum(arr, 0, targetSum);
    }

    private int countSubsetsWithTargetSum(int[] arr, int index, int targetSum) {
        /*
         * Base case: If we've exhauated the array (index == arr.length),
         * check if the target sum is zero. If it is, we have found a valid subset
         * that adds up to the target sum, so return 1 to count this subset.
         * Otherwise, return 0 to indicate no valid subset was found for this path.
         */
        if (index == arr.length) {
            return targetSum == 0 ? 1 : 0;
        }

        /*
         * If the current element is greater than the target sum, we cannot include it in the subset.
         * Including this element would reduce the target sum to a negative value, which is not achievable.
         * According to the problem constraints, both the array elements and the target
         * sum are non-negative.Therefore, once the target sum becomes negative, it cannot return to a
         * non-negative value, so this path can safely be ignored.
         */
        int include = 0;
        // Option 1: Include the current element (if it does not exceed the targetSum) and count the subsets that achieve the target sum.
        if (targetSum >= arr[index]) {
            include = countSubsetsWithTargetSum(arr, index + 1, targetSum - arr[index]) % MOD;
        }
        
         // Option 2: Exclude the current element and count the subsets that achieve the target sum.
        int exclude = countSubsetsWithTargetSum(arr, index + 1, targetSum) % MOD;

        return (include + exclude) % MOD;
    }
}


//Better Approach

class Solution {
    private static final int MOD = 1000000007;
    private int[][] cache;

    public int perfectSum(int arr[], int targetSum) {
        // cache[i][j] represents count of subsets that sum to  value j using the subarray arr[i ... arr.length - 1].
        cache = new int[arr.length][targetSum + 1];
        intializeCache();
        return countSubsetsWithTargetSum(arr, 0, targetSum);
    }

    private int countSubsetsWithTargetSum(int[] arr, int index, int targetSum) {
        if (index == arr.length) {
            return targetSum == 0 ? 1 : 0;
        }
        
        if (cache[index][targetSum] != -1) {
            return cache[index][targetSum];
        }

        int include = 0;
        if (targetSum >= arr[index]) {
            include = countSubsetsWithTargetSum(arr, index + 1, targetSum - arr[index]) % MOD;
        }
        
        int exclude = countSubsetsWithTargetSum(arr, index + 1, targetSum) % MOD;

        return cache[index][targetSum] = (include + exclude) % MOD;
    }
    
    private void intializeCache() {
        for (int i = 0; i < cache.length; i++) {
            Arrays.fill(cache[i], -1);
        }
    }
}


//Optimal Approach

//Naive Implementation

class Solution {
    private static final int MOD = 1000000007;

    public int perfectSum(int arr[], int targetSum) {
        // dp[i][j] indicates the count of subsets of the subarray arr[i..arr.length - 1] that sum to target 'j'
        int[][] dp = new int[arr.length + 1][targetSum + 1];

        // There is one way to achieve a sum of 0 using an empty array, and that way is by selecting the empty subset.
        dp[arr.length][0] = 1;

        // If the array is empty , we cannot form any positive target sum
        for (int sum = 1; sum <= targetSum; sum++) {
            dp[arr.length][sum] = 0;
        }

        for (int index = arr.length - 1; index >= 0; index--) {
            for (int sum = 0; sum <= targetSum; sum++) {
                int include = 0;
                if (sum >= arr[index]) {
                    include = dp[index + 1][sum - arr[index]] % MOD;
                }
                int exclude = dp[index + 1][sum] % MOD;
                dp[index][sum] = (include + exclude) % MOD;
            }
        }

        return dp[0][targetSum];
    }
}


//Optimal Implementation 

class Solution {
    private static final int MOD = 1000000007;

    public int perfectSum(int arr[], int targetSum) {
        int[][] dp = new int[arr.length + 1][targetSum + 1];

        dp[arr.length][0] = 1;

        for (int index = arr.length - 1; index >= 0; index--) {
            for (int sum = 0; sum <= targetSum; sum++) {
                int include = 0;
                if (sum >= arr[index]) {
                    include = dp[index + 1][sum - arr[index]] % MOD;
                }
                int exclude = dp[index + 1][sum] % MOD;
                dp[index][sum] = (include + exclude) % MOD;
            }
        }

        return dp[0][targetSum];
    }
}


//Aliter (Space optimised)

class Solution {
    private static final int MOD = 1000000007;

    public int perfectSum(int arr[], int targetSum) {
        int[] nextRow = new int[targetSum + 1];
        int[] currentRow = new int[targetSum + 1];

        nextRow[0] = 1;

        for (int index = arr.length - 1; index >= 0; index--) {
            for (int sum = 0; sum <= targetSum; sum++) {
                int include = 0;
                if (sum >= arr[index]) {
                    include = nextRow[sum - arr[index]] % MOD;
                }
                int exclude = nextRow[sum] % MOD;
                currentRow[sum] = (include + exclude) % MOD;
            }

            int[] temp = currentRow;
            currentRow = nextRow;
            nextRow = temp;
        }

        return nextRow[targetSum];
    }
}
